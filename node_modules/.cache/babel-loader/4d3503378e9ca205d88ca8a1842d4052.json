{"ast":null,"code":"var _jsxFileName = \"/Users/lomies/Documents/React/Emoji-Garden/src/Grid.jsx\";\nimport React from 'react';\nimport './Grid.css';\n\nclass Grid extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.AddEmoji = () => {\n      let newEmoji = [...this.state.garden];\n      const Gardenfilterd = newEmoji.filter(garden => garden.emoji === '');\n      const RandomNumber = Math.floor(Math.random() * Gardenfilterd.length) + 0;\n\n      if (Gardenfilterd.length !== 0) {\n        Gardenfilterd[RandomNumber].emoji = this.state.emoji[0];\n        this.ChangeEmoji(Gardenfilterd[RandomNumber].id);\n        this.setState({\n          newEmoji\n        });\n      }\n    };\n\n    this.DeleteEmoji = id => {\n      let returnGarden = [...this.state.garden];\n      returnGarden[id].emoji = '';\n      this.setState({\n        garden: returnGarden\n      });\n    };\n\n    this.ChangeEmoji = id => {\n      let newEmoji = [...this.state.garden];\n      setTimeout(() => {\n        if (newEmoji[id].emoji === this.state.emoji[0]) {\n          newEmoji[id].emoji = this.state.emoji[1];\n          this.setState({\n            newEmoji\n          });\n        }\n      }, 2000);\n      setTimeout(() => {\n        if (newEmoji[id].emoji === this.state.emoji[1]) {\n          newEmoji[id].emoji = this.state.emoji[2];\n          this.setState({\n            newEmoji\n          });\n        }\n      }, 4000);\n    };\n\n    this.state = {\n      garden: props.garden,\n      emoji: props.emoji\n    };\n  }\n  /*handle the change in cell*/\n\n\n  render() {\n    let ligne = this.state.garden.map((icone, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"green\",\n      id: icone.id,\n      key: Date.now() + index,\n      onClick: () => this.DeleteEmoji(icone.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, icone.emoji));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, ligne), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.AddEmoji(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, \"Plant an Emoji\"));\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["/Users/lomies/Documents/React/Emoji-Garden/src/Grid.jsx"],"names":["React","Grid","Component","constructor","props","AddEmoji","newEmoji","state","garden","Gardenfilterd","filter","emoji","RandomNumber","Math","floor","random","length","ChangeEmoji","id","setState","DeleteEmoji","returnGarden","setTimeout","render","ligne","map","icone","index","Date","now"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './Grid.css'\n\nclass Grid extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            garden: props.garden,\n            emoji: props.emoji    \n        }\n    }\n\n    /*handle the change in cell*/\n    AddEmoji = () => {\n        let newEmoji = [...this.state.garden]\n        const Gardenfilterd = newEmoji.filter(garden => garden.emoji === '');\n        const RandomNumber = Math.floor(Math.random() * Gardenfilterd.length) + 0 ;\n        if(Gardenfilterd.length !== 0){\n            Gardenfilterd[RandomNumber].emoji = this.state.emoji[0]\n            this.ChangeEmoji(Gardenfilterd[RandomNumber].id)\n            this.setState({newEmoji}) \n        }\n    };\n\n    /*handle the delete for cell content*/\n    DeleteEmoji = (id) => {\n        let returnGarden = [...this.state.garden]\n        returnGarden[id].emoji = ''\n        this.setState({garden: returnGarden}) \n    }\n\n\n    /*handle growth of plant*/\n    ChangeEmoji = (id) => {\n        let newEmoji = [...this.state.garden]\n        setTimeout(() => {\n            if(newEmoji[id].emoji === this.state.emoji[0] ){\n                newEmoji[id].emoji = this.state.emoji[1]\n                this.setState({newEmoji}) \n            }\n        }, 2000);\n        setTimeout(() => {\n            if(newEmoji[id].emoji === this.state.emoji[1]){\n                newEmoji[id].emoji = this.state.emoji[2]\n                this.setState({newEmoji}) \n            }\n        }, 4000);\n    }\n\n    render(){\n        let ligne = this.state.garden.map((icone, index) =>\n            <div className='green' id={icone.id} key={Date.now() + index} onClick={() =>this.DeleteEmoji(icone.id)} >{icone.emoji}</div>\n        )\n        return (\n            <div>\n                <div className='wrapper'>\n                    {ligne}\n                </div>\n                <button onClick={()=>this.AddEmoji()}>Plant an Emoji</button>\n            </div>\n        )\n    }\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}